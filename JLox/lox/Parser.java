package JLox.lox;

import java.util.ArrayList;
import java.util.List;

/**
 * The recursive-descent parser parsing the stream of tokens generated by the
 * lexer.
 * It builds an abstract syntax tree (AST) from the tokens.
 * The grammar is defined in the comments of each method.
 * The parser uses a top-down approach to parse expressions and statements.
 */
public class Parser {

    // Error class to handle parsing errors.
    // This is a runtime exception that is thrown when a parsing error occurs.
    private static class ParseError extends RuntimeException {
    }

    // List of tokens produce by scanner
    private final List<Token> tokens;

    // The current position in the list of tokens.
    // It is used to track which token is currently being processed.
    private int current = 0;

    public Parser(List<Token> tokens) {
        this.tokens = tokens;
    }

    // Parses the tokens and returns the root expression of the AST.
    // If a parsing error occurs, it returns null.
    public List<Stmt> parse() {
        List<Stmt> statements = new ArrayList<>();
        while (!isAtEnd()) {
            statements.add(statement());
        }

        return statements;
    }

    // program → statement* EOF 
    private Stmt statement() {
        if (match(TokenType.PRINT)) {
            return printStatement();
        }

        return expressionStatement();
    }

    // printStmt → "print" expression ";" 
    private Stmt printStatement() {
        Expr value = expression();
        consume(TokenType.SEMICOLON, "Expect ';' after value.");
        return new Stmt.Print(value);
    }

    // expressionStmt → expression ";"
    private Stmt expressionStatement() {
        Expr expr = expression();
        consume(TokenType.SEMICOLON, "Expect ';' after expression.");
        return new Stmt.Expression(expr);
    }

    // expression → equality
    private Expr expression() {
        return equality();
    }

    // equality → comparison ( ( "!=" | "==" ) comparison )* ;
    private Expr equality() {
        Expr expr = comparison();

        while (match(TokenType.BANG_EQUAL, TokenType.EQUAL_EQUAL)) {
            Token operator = previous();
            Expr right = comparison();
            expr = new Expr.Binary(expr, operator, right);
        }

        return expr;
    }

    // comparison → term ( ( ">" | ">=" | "<" | "<=" ) term )* ;
    private Expr comparison() {
        Expr expr = term();

        while (match(TokenType.LESS, TokenType.LESS_EQUAL, TokenType.GREATER, TokenType.GREATER_EQUAL)) {
            Token operator = previous();
            Expr right = term();
            expr = new Expr.Binary(expr, operator, right);
        }

        return expr;
    }

    // term → factor ( ( "-" | "+" ) factor )* ;
    private Expr term() {
        Expr expr = factor();

        while (match(TokenType.MINUS, TokenType.PLUS)) {
            Token operator = previous();
            Expr right = factor();
            expr = new Expr.Binary(expr, operator, right);
        }

        return expr;
    }

    // factor → unary ( ( "/" | "*" ) unary )* ;
    private Expr factor() {
        Expr expr = unary();

        while (match(TokenType.SLASH, TokenType.STAR)) {
            Token operator = previous();
            Expr right = unary();
            expr = new Expr.Binary(expr, operator, right);
        }

        return expr;
    }

    // unary → ( "!" | "-" ) unary | primary ;
    private Expr unary() {
        if (match(TokenType.BANG, TokenType.MINUS)) {
            Token operator = previous();
            Expr right = unary();
            return new Expr.Unary(operator, right);
        }

        return primary();
    }

    // primary → NUMBER | STRING | "true" | "false" | "nil" | "(" expression ")" ;
    private Expr primary() {
        if (match(TokenType.FALSE))
            return new Expr.Literal(false);
        if (match(TokenType.TRUE))
            return new Expr.Literal(true);
        if (match(TokenType.NIL))
            return new Expr.Literal(null);

        if (match(TokenType.STRING, TokenType.NUMBER)) {
            return new Expr.Literal(previous().literal);
        }

        if (match(TokenType.LEFT_PAREN)) {
            Expr expr = expression();
            consume(TokenType.RIGHT_PAREN, "Expect ')' after expression.");
            return new Expr.Grouping(expr);
        }

        throw error(peek(), "Expect expression.");
    }

    // Check if current token has any of the given type if yes consumes it else
    // return false
    private boolean match(TokenType... types) {
        for (TokenType type : types) {
            if (check(type)) {
                advance();
                return true;
            }
        }
        return false;
    }

    // Consumes the current token if it matches the given type, otherwise throws an
    // error with provided message
    private Token consume(TokenType type, String message) {
        if (check(type)) {
            return advance();
        }
        // If the current token is not of the expected type, throw a ParseError
        throw error(peek(), message);
    }

    // Returns true if the current token is of the given type and didn't consume it
    private boolean check(TokenType type) {
        if (isAtEnd()) {
            return false;
        }

        return peek().type == type;
    }

    // Consumes and returns the token and advances pointer to next token
    private Token advance() {
        if (!isAtEnd()) {
            current++;
        }

        return previous();
    }

    // Check if we are at the end of Tokens stream
    private boolean isAtEnd() {
        return peek().type == TokenType.EOF;
    }

    // Returns current token but doesn't consume it
    private Token peek() {
        return tokens.get(current);
    }

    // Return the previous token appearing before the current token
    private Token previous() {
        return tokens.get(current - 1);
    }

    // Throw a ParseError with the given token and message to indicate a parsing
    // error.
    private ParseError error(Token token, String message) {
        Lox.error(token, message);
        return new ParseError();
    }

    // Synchronizes the parser to recover from errors.
    // It skips tokens until it finds a statement boundary or a known keyword which
    // is start of a statement.
    private void synchronize() {
        advance();

        while (!isAtEnd()) {
            if (peek().type == TokenType.SEMICOLON) {
                return;
            }

            switch (peek().type) {
                case CLASS:
                case FUN:
                case VAR:
                case FOR:
                case IF:
                case WHILE:
                case PRINT:
                case RETURN:
                    return;

            }

            advance();
        }
    }

}
